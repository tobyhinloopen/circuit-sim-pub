!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){e.exports=n.p+"f268bd1ba5bece7236d336ce0f368569.png"},function(e,t,n){e.exports=n.p+"7d2ae63118a73e0d59606ed6aaa8929f.png"},function(e,t,n){e.exports=n.p+"7b225a34ceb4c08c5b147a92e1351372.png"},function(e,t,n){"use strict";n.r(t);var r=n(0),s=n.n(r),i=n(1),h=n.n(i),a=n(2),o=n.n(a),c=function(){function e(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=0),void 0===r&&(r=!1),this.dstRef=e,this.srcRefs=t,this.stateChange=n,this.state=r}return e.prototype.processStateChange=function(e,t){if(e&&1!==this.stateChange){if(this.stateChange+=function(e){return u+l*e()}(t),this.stateChange>=1)return this.stateChange=1,this.state=!0,!0}else if(!e&&0!==this.stateChange&&(this.stateChange-=function(e){return f+l*e()}(t),this.stateChange<=0))return this.stateChange=0,this.state=!1,!0;return!1},e}(),f=.5,u=.5,l=.5;var d=function(){function e(e){this.input=e,this.threshold=220,this.maxReference=0,this.notGates=[],this.notGateIndexPairs=[],this.freeReferences=[],this.references=new Uint32Array(e.width*e.height),this.length=e.width*e.height}return e.prototype.parse=function(){this.loadReferences(),this.mergeCrossings(),this.processNotGates(),this.dropIndependentWires()},e.prototype.merge=function(e,t){this.mergeUntil(e,t,this.length)},e.prototype.flatten=function(){for(;this.freeReferences.length>0;){var e=this.freeReferences.pop();this.determineMaxReference(),e<this.maxReference&&this.changeUntil(this.maxReference--,e,this.length)}},e.prototype.loadReferences=function(){for(var e=0|this.threshold,t=0;t<this.length;t++){var n=0|this.input.data[4*t+0],r=0|this.input.data[4*t+1],s=0|this.input.data[4*t+2];if(n>=e||r>=e||s>=e){var i=(t%this.input.width|0)>0?this.references[t-1]:0,h=t>this.input.width?this.references[t-this.input.width]:0;h&&i&&h!==i?(this.mergeUntil(h,i,t),this.references[t]=i):this.references[t]=i||(h||this.createNextReference())}else this.references[t]=0}},e.prototype.mergeCrossings=function(){for(var e=0|this.input.width,t=0|this.input.height,n=1;n<t-1;n++)for(var r=1;r<e-1;r++){var s=n*e+r|0;if(!(0|this.references[s])){var i=s-e|0,h=s+e|0,a=s-1|0,o=s+1|0,c=0|this.references[i],f=0|this.references[h],u=0|this.references[a],l=0|this.references[o],d=0|this.references[i-1],p=0|this.references[i+1],g=0|this.references[h-1],v=0|this.references[h+1];c&&f&&l&&u&&(d||p||g||v?d&&p&&!g&&!v?this.notGateIndexPairs.push([i,h]):!d&&!p&&g&&v?this.notGateIndexPairs.push([h,i]):d&&g&&!p&&!v?this.notGateIndexPairs.push([a,o]):!d&&!g&&p&&v&&this.notGateIndexPairs.push([o,a]):(c!=f&&this.merge(c,f),u!=l&&this.merge(u,l)))}}},e.prototype.dropIndependentWires=function(){for(var e=function(e){t.notGates.find(function(t){var n=t.srcRefs;return t.dstRef===e||-1!==n.indexOf(e)})||(t.changeUntil(e,0,t.length),t.freeReferences.push(e))},t=this,n=0;n<=this.maxReference;n++)e(n)},e.prototype.processNotGates=function(){for(var e={},t=0,n=this.notGateIndexPairs;t<n.length;t++){var r=n[t],s=r[0],i=r[1],h=this.references[i];e[h]||(e[h]=new c(h)),e[h].srcRefs.push(this.references[s])}this.notGates=Object.keys(e).map(function(t){return e[t]})},e.prototype.mergeUntil=function(e,t,n){this.changeUntil(e,t,n),this.freeReferences.push(e),this.determineMaxReference()},e.prototype.changeUntil=function(e,t,n){for(var r=0;r<n;r++)this.references[r]===e&&(this.references[r]=t)},e.prototype.createNextReference=function(){var e=this.freeReferences.shift();return e||(this.maxReference++,this.maxReference)},e.prototype.determineMaxReference=function(){for(var e=0,t=0;t<this.references.length;t++){var n=this.references[t];n>e&&(e=n)}this.maxReference=e},e}(),p=function(){function e(){var e=this;this.scale=1,this.state=null,this.notGates=null,this.references=null,this.sourceImageData=null,this.stopped=!1,this.maxReference=0,this.forceEnableReference=0,document.body.style.background="#444",this.onMouseUp=function(t){return e.mouseUp(t)},this.element=document.createElement("div"),this.source=document.createElement("img"),this.element.appendChild(this.source),this.canvas=document.createElement("canvas"),this.element.appendChild(this.canvas),this.referencesPreview=document.createElement("canvas"),this.element.appendChild(this.referencesPreview),this.element.style.imageRendering="pixelated",this.context=this.canvas.getContext("2d"),this.canvas.addEventListener("mousedown",function(t){return e.mouseDown(t)}),this.referencesPreview.addEventListener("mousedown",function(t){return e.mouseDown(t)}),window.addEventListener("mouseup",this.onMouseUp)}return e.prototype.start=function(){this.source.style.display="inline-block",this.canvas.style.display="inline-block",this.referencesPreview.style.display="inline-block"},e.prototype.stop=function(){this.stopped=!0,window.removeEventListener("mouseup",this.onMouseUp)},e.prototype.load=function(e){var t=this;this.source.src=e,this.source.addEventListener("load",function(){return t.sourceReady()})},e.prototype.sourceReady=function(){this.canvas.width=this.referencesPreview.width=this.width,this.canvas.height=this.referencesPreview.height=this.height,this.canvas.style.width=this.source.style.width=this.referencesPreview.style.width=this.renderWidth.toFixed()+"px",this.canvas.style.height=this.source.style.height=this.referencesPreview.style.height=this.renderHeight.toFixed()+"px",this.context.clearRect(0,0,this.width,this.height),this.context.drawImage(this.source,0,0),this.source.style.display="none",this.sourceImageData=this.context.getImageData(0,0,this.width,this.height);var e=new d(this.sourceImageData);e.parse(),this.renderReferencesPreview(e),this.renderNotGatesPreview(e),this.notGates=e.notGates.slice(),this.references=e.references.slice(),this.maxReference=e.maxReference,console.log(this.maxReference),this.state=new Uint8Array(this.maxReference+1),this.next()},e.prototype.next=function(){var e=this;this.stopped||(this.simulate(),this.render(),requestAnimationFrame(function(){return e.next()}))},e.prototype.simulate=function(){var e=this;this.state.fill(0);for(var t=0,n=this.notGates;t<n.length;t++){var r=n[t];this.state[r.dstRef]=r.state?1:0}this.forceEnableReference>0&&(this.state[this.forceEnableReference]=1);for(var s=0,i=this.notGates;s<i.length;s++){var h=!!(r=i[s]).srcRefs.find(function(t){return!e.state[t]});r.processStateChange(h,Math.random)&&(this.state[r.dstRef]=r.state?1:0)}},e.prototype.render=function(){this.context.fillStyle="black",this.context.globalAlpha=1,this.context.fillRect(0,0,this.width,this.height),this.context.globalAlpha=.2,this.context.drawImage(this.source,0,0);for(var e=this.context.getImageData(0,0,this.width,this.height),t=this.references.length,n=0;n<t;n++){var r=0|this.references[n];r&&0|this.state[r]&&(e.data[4*n+0]=this.sourceImageData.data[4*n+0],e.data[4*n+1]=this.sourceImageData.data[4*n+1],e.data[4*n+2]=this.sourceImageData.data[4*n+2])}this.context.putImageData(e,0,0)},Object.defineProperty(e.prototype,"width",{get:function(){return this.source.naturalWidth},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.source.naturalHeight},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"renderWidth",{get:function(){return this.width*this.scale},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"renderHeight",{get:function(){return this.height*this.scale},enumerable:!0,configurable:!0}),e.prototype.mouseDown=function(e){var t=e.offsetX/this.renderWidth*this.width|0,n=e.offsetY/this.renderHeight*this.height|0,r=this.references[n*this.width+t];console.log({x:t,y:n,reference:r,state:this.state}),this.forceEnableReference!==r&&(this.forceEnableReference=r,this.forceEnableReference>0&&(this.state[this.forceEnableReference]=1),this.render())},e.prototype.mouseUp=function(e){this.forceEnableReference&&(this.forceEnableReference=0,this.render())},e.prototype.renderReferencesPreview=function(e){var t=e.maxReference,n=e.length,r=e.references,s=this.referencesPreview.getContext("2d");s.clearRect(0,0,this.width,this.height),s.globalAlpha=.4;for(var i=[],h=0;h<=t;h++)i.push(g(t+1,h));i.sort(function(){return Math.random()>.5?-1:1}),i.unshift("black");for(h=0;h<n;h++){var a=r[h];s.fillStyle=i[a];var o=h%this.width|0,c=h/this.width|0;s.fillRect(o,c,1,1)}},e.prototype.renderNotGatesPreview=function(e){var t=e.notGateIndexPairs,n=this.referencesPreview.getContext("2d");n.globalAlpha=1;for(var r=0,s=t;r<s.length;r++){var i=s[r],h=i[0],a=i[1];n.fillStyle="#F00";var o=h%this.width|0,c=h/this.width|0;n.fillRect(o,c,1,1),n.fillStyle="#0F0";var f=a%this.width|0,u=a/this.width|0;n.fillRect(f,u,1,1)}},e}();function g(e,t){var n,r,s,i=t/e,h=~~(6*i),a=6*i-h,o=1-a;switch(h%6){case 0:n=1,r=a,s=0;break;case 1:n=o,r=1,s=0;break;case 2:n=0,r=1,s=a;break;case 3:n=0,r=o,s=1;break;case 4:n=a,r=0,s=1;break;case 5:n=1,r=0,s=o;break;default:throw new Error("")}return"#"+("00"+(~~(255*n)).toString(16)).slice(-2)+("00"+(~~(255*r)).toString(16)).slice(-2)+("00"+(~~(255*s)).toString(16)).slice(-2)}var v={largeClock:s.a,clock:h.a,cpu:o.a},m=location.hash&&location.hash.substr(1)||Object.keys(v)[0],y=null;document.addEventListener("DOMContentLoaded",function(){y&&(y.stop(),document.body.removeChild(y.element),y=null),y=new p,document.body.appendChild(y.element),y.start(),y.load(v[m])})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9sYXJnZS1jbG9jay5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9jbG9jay5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9jcHUucG5nIiwid2VicGFjazovLy8uL3NyYy9HYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9JbWFnZURhdGFQYXJzZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJHYXRlIiwiZHN0UmVmIiwic3JjUmVmcyIsInN0YXRlQ2hhbmdlIiwic3RhdGUiLCJ0aGlzIiwicHJvY2Vzc1N0YXRlQ2hhbmdlIiwibmV3U3RhdGUiLCJyYW5kIiwicmFpc2UiLCJyYW5kb21uZXNzIiwiZ2V0UmFuZG9tUmFpc2VjaGFuZ2UiLCJmYWxsIiwiZ2V0UmFuZG9tRmFsbENoYW5nZSIsIkltYWdlRGF0YVBhcnNlcl9JbWFnZURhdGFQYXJzZXIiLCJJbWFnZURhdGFQYXJzZXIiLCJpbnB1dCIsInRocmVzaG9sZCIsIm1heFJlZmVyZW5jZSIsIm5vdEdhdGVzIiwibm90R2F0ZUluZGV4UGFpcnMiLCJmcmVlUmVmZXJlbmNlcyIsInJlZmVyZW5jZXMiLCJVaW50MzJBcnJheSIsIndpZHRoIiwiaGVpZ2h0IiwibGVuZ3RoIiwicGFyc2UiLCJsb2FkUmVmZXJlbmNlcyIsIm1lcmdlQ3Jvc3NpbmdzIiwicHJvY2Vzc05vdEdhdGVzIiwiZHJvcEluZGVwZW5kZW50V2lyZXMiLCJtZXJnZSIsImZyb20iLCJ0byIsIm1lcmdlVW50aWwiLCJmbGF0dGVuIiwicmVmZXJlbmNlIiwicG9wIiwiZGV0ZXJtaW5lTWF4UmVmZXJlbmNlIiwiY2hhbmdlVW50aWwiLCJkYXRhIiwiZyIsImIiLCJsZWZ0UmVmZXJlbmNlIiwidXBwZXJSZWZlcmVuY2UiLCJjcmVhdGVOZXh0UmVmZXJlbmNlIiwieSIsIngiLCJ0aSIsImJpIiwibGkiLCJyaSIsInRsIiwidHIiLCJibCIsImJyIiwicHVzaCIsIl9sb29wXzEiLCJ0aGlzXzEiLCJmaW5kIiwiX2EiLCJpbmRleE9mIiwiZ2F0ZXMiLCJfaSIsIl9iIiwic3JjSWR4IiwiZHN0SWR4Iiwia2V5cyIsIm1hcCIsImsiLCJmcmVlUmVmZXJlbmNlIiwic2hpZnQiLCJyZWFsTWF4UmVmZXJlbmNlIiwiQXBwX0FwcCIsIkFwcCIsIl90aGlzIiwic2NhbGUiLCJzb3VyY2VJbWFnZURhdGEiLCJzdG9wcGVkIiwiZm9yY2VFbmFibGVSZWZlcmVuY2UiLCJkb2N1bWVudCIsImJvZHkiLCJzdHlsZSIsImJhY2tncm91bmQiLCJvbk1vdXNlVXAiLCJldmVudCIsIm1vdXNlVXAiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNvdXJjZSIsImFwcGVuZENoaWxkIiwiY2FudmFzIiwicmVmZXJlbmNlc1ByZXZpZXciLCJpbWFnZVJlbmRlcmluZyIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1vdXNlRG93biIsIndpbmRvdyIsInN0YXJ0IiwiZGlzcGxheSIsInN0b3AiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibG9hZCIsInNyYyIsInNvdXJjZVJlYWR5IiwicmVuZGVyV2lkdGgiLCJ0b0ZpeGVkIiwicmVuZGVySGVpZ2h0IiwiY2xlYXJSZWN0IiwiZHJhd0ltYWdlIiwiZ2V0SW1hZ2VEYXRhIiwicGFyc2VyIiwicmVuZGVyUmVmZXJlbmNlc1ByZXZpZXciLCJyZW5kZXJOb3RHYXRlc1ByZXZpZXciLCJzbGljZSIsImNvbnNvbGUiLCJsb2ciLCJVaW50OEFycmF5IiwibmV4dCIsInNpbXVsYXRlIiwicmVuZGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmlsbCIsImdhdGUiLCJfYyIsImFueVNvdXJjZUxvdyIsInJlZiIsIk1hdGgiLCJyYW5kb20iLCJmaWxsU3R5bGUiLCJnbG9iYWxBbHBoYSIsImZpbGxSZWN0IiwiaW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwibmF0dXJhbFdpZHRoIiwiY29uZmlndXJhYmxlIiwibmF0dXJhbEhlaWdodCIsIm9mZnNldFgiLCJvZmZzZXRZIiwicmN0eCIsImNvbG9ycyIsInJhaW5ib3ciLCJzb3J0IiwidW5zaGlmdCIsIm5vdEdhdGVJbmRleFBhaXJzXzEiLCJzb3VyY2VJbmRleCIsInJlY2VpdmVySW5kZXgiLCJzb3VyY2VYIiwic291cmNlWSIsInJlY2VpdmVyWCIsInJlY2VpdmVyWSIsIm51bU9mU3RlcHMiLCJzdGVwIiwiaCIsImYiLCJxIiwiRXJyb3IiLCJ0b1N0cmluZyIsImJpdG1hcHMiLCJsYXJnZUNsb2NrIiwibGFyZ2VfY2xvY2tfZGVmYXVsdCIsImEiLCJjbG9jayIsImNsb2NrX2RlZmF1bHQiLCJjcHUiLCJjcHVfZGVmYXVsdCIsImJpdG1hcE5hbWUiLCJsb2NhdGlvbiIsImhhc2giLCJzdWJzdHIiLCJhcHAiLCJyZW1vdmVDaGlsZCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFB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QXhFLFFBQ0F3RSxFQUFBcEUsS0FBQXdELEVBQUFRIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImYyNjhiZDFiYTViZWNlNzIzNmQzMzZjZTBmMzY4NTY5LnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjdkMmFlNjMxMThhNzNlMGQ1OTYwNmVkNmFhYTg5MjlmLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjdiMjI1YTM0Y2ViNGMwOGM1YjE0N2E5MmUxMzUxMzcyLnBuZ1wiOyIsInZhciBHYXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdhdGUoZHN0UmVmLCBzcmNSZWZzLCBzdGF0ZUNoYW5nZSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHNyY1JlZnMgPT09IHZvaWQgMCkgeyBzcmNSZWZzID0gW107IH1cbiAgICAgICAgaWYgKHN0YXRlQ2hhbmdlID09PSB2b2lkIDApIHsgc3RhdGVDaGFuZ2UgPSAwOyB9XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7IHN0YXRlID0gZmFsc2U7IH1cbiAgICAgICAgdGhpcy5kc3RSZWYgPSBkc3RSZWY7XG4gICAgICAgIHRoaXMuc3JjUmVmcyA9IHNyY1JlZnM7XG4gICAgICAgIHRoaXMuc3RhdGVDaGFuZ2UgPSBzdGF0ZUNoYW5nZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIH1cbiAgICBHYXRlLnByb3RvdHlwZS5wcm9jZXNzU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiAobmV3U3RhdGUsIHJhbmQpIHtcbiAgICAgICAgaWYgKG5ld1N0YXRlICYmIHRoaXMuc3RhdGVDaGFuZ2UgIT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVDaGFuZ2UgKz0gZ2V0UmFuZG9tUmFpc2VjaGFuZ2UocmFuZCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZUNoYW5nZSA+PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUNoYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW5ld1N0YXRlICYmIHRoaXMuc3RhdGVDaGFuZ2UgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVDaGFuZ2UgLT0gZ2V0UmFuZG9tRmFsbENoYW5nZShyYW5kKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlQ2hhbmdlIDw9IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgcmV0dXJuIEdhdGU7XG59KCkpO1xuZXhwb3J0IHsgR2F0ZSB9O1xudmFyIGZhbGwgPSAwLjU7XG52YXIgcmFpc2UgPSAwLjU7XG52YXIgcmFuZG9tbmVzcyA9IDAuNTtcbmZ1bmN0aW9uIGdldFJhbmRvbUZhbGxDaGFuZ2UocmFuZCkge1xuICAgIHJldHVybiBmYWxsICsgcmFuZG9tbmVzcyAqIHJhbmQoKTtcbn1cbmZ1bmN0aW9uIGdldFJhbmRvbVJhaXNlY2hhbmdlKHJhbmQpIHtcbiAgICByZXR1cm4gcmFpc2UgKyByYW5kb21uZXNzICogcmFuZCgpO1xufVxuIiwiaW1wb3J0IHsgR2F0ZSB9IGZyb20gXCIuL0dhdGVcIjtcbnZhciBJbWFnZURhdGFQYXJzZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW1hZ2VEYXRhUGFyc2VyKGlucHV0KSB7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIgdGhyZXNob2xkXG4gICAgICAgICAqIEFueSBwaXhlbCB0aGF0IGNvbnRhaW5zIGFuIFIsIEIgb3IgQiBjb21wb25lbnQgZXF1YWwgb3IgaGlnaGVyIHRoYW4gdGhpcyBpc1xuICAgICAgICAgKiBjb25kdWN0aW5nLiBBbnl0aGluZyBlbHNlIGlzIG5vbi1jb25kdWN0aXZlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50aHJlc2hvbGQgPSAyMjA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIG1heFJlZmVyZW5jZVxuICAgICAgICAgKiBNYXggaWQgdXNlZCBpbiBgcmVmZXJlbmNlc2BcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWF4UmVmZXJlbmNlID0gMDtcbiAgICAgICAgdGhpcy5ub3RHYXRlcyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciBub3RHYXRlSW5kZXhQYWlyc1xuICAgICAgICAgKiBMaXN0IG9mIGluZGV4LXBhaXJzIHRvIHBpeGVscyByZXByZXNlbnRpbmcgbm90LWdhdGVzLlxuICAgICAgICAgKiBUaGUgZmlyc3QgaW5kZXggaXMgdGhlIHNvdXJjZSwgdGhlIHNlY29uZCBpcyB0aGUgcmVjaWV2ZXIuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5vdEdhdGVJbmRleFBhaXJzID0gW107XG4gICAgICAgIHRoaXMuZnJlZVJlZmVyZW5jZXMgPSBbXTtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzID0gbmV3IFVpbnQzMkFycmF5KGlucHV0LndpZHRoICogaW5wdXQuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBpbnB1dC53aWR0aCAqIGlucHV0LmhlaWdodDtcbiAgICB9XG4gICAgSW1hZ2VEYXRhUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sb2FkUmVmZXJlbmNlcygpO1xuICAgICAgICB0aGlzLm1lcmdlQ3Jvc3NpbmdzKCk7XG4gICAgICAgIHRoaXMucHJvY2Vzc05vdEdhdGVzKCk7XG4gICAgICAgIHRoaXMuZHJvcEluZGVwZW5kZW50V2lyZXMoKTtcbiAgICAgICAgLy8gdGhpcy5mbGF0dGVuKCk7XG4gICAgICAgIC8vIHRoaXMucHJvY2Vzc05vdEdhdGVzKCk7XG4gICAgfTtcbiAgICBJbWFnZURhdGFQYXJzZXIucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XG4gICAgICAgIHRoaXMubWVyZ2VVbnRpbChmcm9tLCB0bywgdGhpcy5sZW5ndGgpO1xuICAgIH07XG4gICAgSW1hZ2VEYXRhUGFyc2VyLnByb3RvdHlwZS5mbGF0dGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aGlsZSAodGhpcy5mcmVlUmVmZXJlbmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgcmVmZXJlbmNlID0gdGhpcy5mcmVlUmVmZXJlbmNlcy5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuZGV0ZXJtaW5lTWF4UmVmZXJlbmNlKCk7XG4gICAgICAgICAgICBpZiAocmVmZXJlbmNlIDwgdGhpcy5tYXhSZWZlcmVuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVVudGlsKHRoaXMubWF4UmVmZXJlbmNlLS0sIHJlZmVyZW5jZSwgdGhpcy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBJbWFnZURhdGFQYXJzZXIucHJvdG90eXBlLmxvYWRSZWZlcmVuY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhyZXNob2xkID0gdGhpcy50aHJlc2hvbGQgfCAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciByID0gdGhpcy5pbnB1dC5kYXRhW2kgKiA0ICsgMF0gfCAwO1xuICAgICAgICAgICAgdmFyIGcgPSB0aGlzLmlucHV0LmRhdGFbaSAqIDQgKyAxXSB8IDA7XG4gICAgICAgICAgICB2YXIgYiA9IHRoaXMuaW5wdXQuZGF0YVtpICogNCArIDJdIHwgMDtcbiAgICAgICAgICAgIHZhciBpc0hpZ2ggPSByID49IHRocmVzaG9sZCB8fCBnID49IHRocmVzaG9sZCB8fCBiID49IHRocmVzaG9sZDtcbiAgICAgICAgICAgIGlmICghaXNIaWdoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2VzW2ldID0gMDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB4ID0gKGkgJSB0aGlzLmlucHV0LndpZHRoKSB8IDA7XG4gICAgICAgICAgICB2YXIgbGVmdFJlZmVyZW5jZSA9IHggPiAwID8gdGhpcy5yZWZlcmVuY2VzW2kgLSAxXSA6IDA7XG4gICAgICAgICAgICB2YXIgdXBwZXJSZWZlcmVuY2UgPSBpID4gdGhpcy5pbnB1dC53aWR0aCA/IHRoaXMucmVmZXJlbmNlc1tpIC0gdGhpcy5pbnB1dC53aWR0aF0gOiAwO1xuICAgICAgICAgICAgaWYgKHVwcGVyUmVmZXJlbmNlICYmIGxlZnRSZWZlcmVuY2UgJiYgdXBwZXJSZWZlcmVuY2UgIT09IGxlZnRSZWZlcmVuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lcmdlVW50aWwodXBwZXJSZWZlcmVuY2UsIGxlZnRSZWZlcmVuY2UsIGkpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmZXJlbmNlc1tpXSA9IGxlZnRSZWZlcmVuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChsZWZ0UmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2VzW2ldID0gbGVmdFJlZmVyZW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVwcGVyUmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2VzW2ldID0gdXBwZXJSZWZlcmVuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZmVyZW5jZXNbaV0gPSB0aGlzLmNyZWF0ZU5leHRSZWZlcmVuY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgSW1hZ2VEYXRhUGFyc2VyLnByb3RvdHlwZS5tZXJnZUNyb3NzaW5ncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5pbnB1dC53aWR0aCB8IDA7XG4gICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLmlucHV0LmhlaWdodCB8IDA7XG4gICAgICAgIGZvciAodmFyIHkgPSAxOyB5IDwgaGVpZ2h0IC0gMTsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciB4ID0gMTsgeCA8IHdpZHRoIC0gMTsgeCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAoeSAqIHdpZHRoICsgeCkgfCAwO1xuICAgICAgICAgICAgICAgIHZhciBzZWxmXzEgPSB0aGlzLnJlZmVyZW5jZXNbaV0gfCAwO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0aSA9IChpIC0gd2lkdGgpIHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgYmkgPSAoaSArIHdpZHRoKSB8IDA7XG4gICAgICAgICAgICAgICAgdmFyIGxpID0gKGkgLSAxKSB8IDA7XG4gICAgICAgICAgICAgICAgdmFyIHJpID0gKGkgKyAxKSB8IDA7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnJlZmVyZW5jZXNbdGldIHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IHRoaXMucmVmZXJlbmNlc1tiaV0gfCAwO1xuICAgICAgICAgICAgICAgIHZhciBsID0gdGhpcy5yZWZlcmVuY2VzW2xpXSB8IDA7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnJlZmVyZW5jZXNbcmldIHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgdGwgPSB0aGlzLnJlZmVyZW5jZXNbdGkgLSAxXSB8IDA7XG4gICAgICAgICAgICAgICAgdmFyIHRyID0gdGhpcy5yZWZlcmVuY2VzW3RpICsgMV0gfCAwO1xuICAgICAgICAgICAgICAgIHZhciBibCA9IHRoaXMucmVmZXJlbmNlc1tiaSAtIDFdIHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgYnIgPSB0aGlzLnJlZmVyZW5jZXNbYmkgKyAxXSB8IDA7XG4gICAgICAgICAgICAgICAgaWYgKHQgJiYgYiAmJiByICYmIGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0bCAmJiAhdHIgJiYgIWJsICYmICFicikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgIT0gYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVyZ2UodCwgYik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobCAhPSByKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXJnZShsLCByKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0bCAmJiB0ciAmJiAhYmwgJiYgIWJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdEdhdGVJbmRleFBhaXJzLnB1c2goW3RpLCBiaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0bCAmJiAhdHIgJiYgYmwgJiYgYnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90R2F0ZUluZGV4UGFpcnMucHVzaChbYmksIHRpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGwgJiYgYmwgJiYgIXRyICYmICFicikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RHYXRlSW5kZXhQYWlycy5wdXNoKFtsaSwgcmldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghdGwgJiYgIWJsICYmIHRyICYmIGJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdEdhdGVJbmRleFBhaXJzLnB1c2goW3JpLCBsaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBJbWFnZURhdGFQYXJzZXIucHJvdG90eXBlLmRyb3BJbmRlcGVuZGVudFdpcmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXNfMS5ub3RHYXRlcy5maW5kKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHZhciBzcmNSZWZzID0gX2Euc3JjUmVmcywgZHN0UmVmID0gX2EuZHN0UmVmO1xuICAgICAgICAgICAgICAgIHJldHVybiBkc3RSZWYgPT09IGkgfHwgc3JjUmVmcy5pbmRleE9mKGkpICE9PSAtMTtcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgdGhpc18xLmNoYW5nZVVudGlsKGksIDAsIHRoaXNfMS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRoaXNfMS5mcmVlUmVmZXJlbmNlcy5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgdGhpc18xID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gdGhpcy5tYXhSZWZlcmVuY2U7IGkrKykge1xuICAgICAgICAgICAgX2xvb3BfMShpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW1hZ2VEYXRhUGFyc2VyLnByb3RvdHlwZS5wcm9jZXNzTm90R2F0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBnYXRlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5ub3RHYXRlSW5kZXhQYWlyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBfYiA9IF9hW19pXSwgc3JjSWR4ID0gX2JbMF0sIGRzdElkeCA9IF9iWzFdO1xuICAgICAgICAgICAgdmFyIGRzdFJlZiA9IHRoaXMucmVmZXJlbmNlc1tkc3RJZHhdO1xuICAgICAgICAgICAgaWYgKCFnYXRlc1tkc3RSZWZdKSB7XG4gICAgICAgICAgICAgICAgZ2F0ZXNbZHN0UmVmXSA9IG5ldyBHYXRlKGRzdFJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnYXRlc1tkc3RSZWZdLnNyY1JlZnMucHVzaCh0aGlzLnJlZmVyZW5jZXNbc3JjSWR4XSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RHYXRlcyA9IE9iamVjdC5rZXlzKGdhdGVzKS5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIGdhdGVzW2tdOyB9KTtcbiAgICB9O1xuICAgIEltYWdlRGF0YVBhcnNlci5wcm90b3R5cGUubWVyZ2VVbnRpbCA9IGZ1bmN0aW9uIChmcm9tLCB0bywgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlVW50aWwoZnJvbSwgdG8sIGxlbmd0aCk7XG4gICAgICAgIHRoaXMuZnJlZVJlZmVyZW5jZXMucHVzaChmcm9tKTtcbiAgICAgICAgdGhpcy5kZXRlcm1pbmVNYXhSZWZlcmVuY2UoKTtcbiAgICB9O1xuICAgIEltYWdlRGF0YVBhcnNlci5wcm90b3R5cGUuY2hhbmdlVW50aWwgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIGxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZWZlcmVuY2VzW2ldID09PSBmcm9tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2VzW2ldID0gdG87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEltYWdlRGF0YVBhcnNlci5wcm90b3R5cGUuY3JlYXRlTmV4dFJlZmVyZW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZyZWVSZWZlcmVuY2UgPSB0aGlzLmZyZWVSZWZlcmVuY2VzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChmcmVlUmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJlZVJlZmVyZW5jZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1heFJlZmVyZW5jZSsrO1xuICAgICAgICByZXR1cm4gdGhpcy5tYXhSZWZlcmVuY2U7XG4gICAgfTtcbiAgICBJbWFnZURhdGFQYXJzZXIucHJvdG90eXBlLmRldGVybWluZU1heFJlZmVyZW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlYWxNYXhSZWZlcmVuY2UgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVmZXJlbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHJlZmVyZW5jZSA9IHRoaXMucmVmZXJlbmNlc1tpXTtcbiAgICAgICAgICAgIGlmIChyZWZlcmVuY2UgPiByZWFsTWF4UmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgcmVhbE1heFJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1heFJlZmVyZW5jZSA9IHJlYWxNYXhSZWZlcmVuY2U7XG4gICAgfTtcbiAgICByZXR1cm4gSW1hZ2VEYXRhUGFyc2VyO1xufSgpKTtcbmV4cG9ydCB7IEltYWdlRGF0YVBhcnNlciB9O1xuIiwiaW1wb3J0IHsgSW1hZ2VEYXRhUGFyc2VyIH0gZnJvbSBcIi4vSW1hZ2VEYXRhUGFyc2VyXCI7XG52YXIgQXBwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwcCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zY2FsZSA9IDE7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLm5vdEdhdGVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzID0gbnVsbDtcbiAgICAgICAgdGhpcy5zb3VyY2VJbWFnZURhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5tYXhSZWZlcmVuY2UgPSAwO1xuICAgICAgICB0aGlzLmZvcmNlRW5hYmxlUmVmZXJlbmNlID0gMDtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gXCIjNDQ0XCI7XG4gICAgICAgIHRoaXMub25Nb3VzZVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5tb3VzZVVwKGV2ZW50KTsgfTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zb3VyY2UpO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyk7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlc1ByZXZpZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5yZWZlcmVuY2VzUHJldmlldyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5pbWFnZVJlbmRlcmluZyA9IFwicGl4ZWxhdGVkXCI7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIF90aGlzLm1vdXNlRG93bihldmVudCk7IH0pO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZXNQcmV2aWV3LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5tb3VzZURvd24oZXZlbnQpOyB9KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgICB9XG4gICAgQXBwLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zb3VyY2Uuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG4gICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZXNQcmV2aWV3LnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgIH07XG4gICAgQXBwLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3BwZWQgPSB0cnVlO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5vbk1vdXNlVXApO1xuICAgIH07XG4gICAgQXBwLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKHNyYykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnNvdXJjZS5zcmMgPSBzcmM7XG4gICAgICAgIHRoaXMuc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNvdXJjZVJlYWR5KCk7IH0pO1xuICAgIH07XG4gICAgQXBwLnByb3RvdHlwZS5zb3VyY2VSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLnJlZmVyZW5jZXNQcmV2aWV3LndpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5yZWZlcmVuY2VzUHJldmlldy5oZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUud2lkdGggPSB0aGlzLnNvdXJjZS5zdHlsZS53aWR0aCA9IHRoaXMucmVmZXJlbmNlc1ByZXZpZXcuc3R5bGUud2lkdGggPSB0aGlzLnJlbmRlcldpZHRoLnRvRml4ZWQoKSArIFwicHhcIjtcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gdGhpcy5zb3VyY2Uuc3R5bGUuaGVpZ2h0ID0gdGhpcy5yZWZlcmVuY2VzUHJldmlldy5zdHlsZS5oZWlnaHQgPSB0aGlzLnJlbmRlckhlaWdodC50b0ZpeGVkKCkgKyBcInB4XCI7XG4gICAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuc291cmNlLCAwLCAwKTtcbiAgICAgICAgdGhpcy5zb3VyY2Uuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICB0aGlzLnNvdXJjZUltYWdlRGF0YSA9IHRoaXMuY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICB2YXIgcGFyc2VyID0gbmV3IEltYWdlRGF0YVBhcnNlcih0aGlzLnNvdXJjZUltYWdlRGF0YSk7XG4gICAgICAgIHBhcnNlci5wYXJzZSgpO1xuICAgICAgICB0aGlzLnJlbmRlclJlZmVyZW5jZXNQcmV2aWV3KHBhcnNlcik7XG4gICAgICAgIHRoaXMucmVuZGVyTm90R2F0ZXNQcmV2aWV3KHBhcnNlcik7XG4gICAgICAgIHRoaXMubm90R2F0ZXMgPSBwYXJzZXIubm90R2F0ZXMuc2xpY2UoKTtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzID0gcGFyc2VyLnJlZmVyZW5jZXMuc2xpY2UoKTtcbiAgICAgICAgdGhpcy5tYXhSZWZlcmVuY2UgPSBwYXJzZXIubWF4UmVmZXJlbmNlO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm1heFJlZmVyZW5jZSk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBuZXcgVWludDhBcnJheSh0aGlzLm1heFJlZmVyZW5jZSArIDEpO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICB9O1xuICAgIEFwcC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuc3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2ltdWxhdGUoKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgLy8gc2V0VGltZW91dCgoKSA9PiB0aGlzLm5leHQoKSwgMTAwKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm5leHQoKTsgfSk7XG4gICAgfTtcbiAgICBBcHAucHJvdG90eXBlLnNpbXVsYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnN0YXRlLmZpbGwoMCk7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLm5vdEdhdGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGdhdGUgPSBfYVtfaV07XG4gICAgICAgICAgICB0aGlzLnN0YXRlW2dhdGUuZHN0UmVmXSA9IGdhdGUuc3RhdGUgPyAxIDogMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5mb3JjZUVuYWJsZVJlZmVyZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVbdGhpcy5mb3JjZUVuYWJsZVJlZmVyZW5jZV0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSB0aGlzLm5vdEdhdGVzOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgdmFyIGdhdGUgPSBfY1tfYl07XG4gICAgICAgICAgICB2YXIgYW55U291cmNlTG93ID0gISFnYXRlLnNyY1JlZnMuZmluZChmdW5jdGlvbiAocmVmKSB7IHJldHVybiAhX3RoaXMuc3RhdGVbcmVmXTsgfSk7XG4gICAgICAgICAgICB2YXIgY2hhbmdlZCA9IGdhdGUucHJvY2Vzc1N0YXRlQ2hhbmdlKGFueVNvdXJjZUxvdywgTWF0aC5yYW5kb20pO1xuICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlW2dhdGUuZHN0UmVmXSA9IGdhdGUuc3RhdGUgPyAxIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQXBwLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IDEuMDtcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gMC4yO1xuICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuc291cmNlLCAwLCAwKTtcbiAgICAgICAgdmFyIGltYWdlRGF0YSA9IHRoaXMuY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5yZWZlcmVuY2VzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMucmVmZXJlbmNlc1tpXSB8IDA7XG4gICAgICAgICAgICBpZiAocmVmICYmIHRoaXMuc3RhdGVbcmVmXSB8IDApIHtcbiAgICAgICAgICAgICAgICBpbWFnZURhdGEuZGF0YVtpICogNCArIDBdID0gdGhpcy5zb3VyY2VJbWFnZURhdGEuZGF0YVtpICogNCArIDBdO1xuICAgICAgICAgICAgICAgIGltYWdlRGF0YS5kYXRhW2kgKiA0ICsgMV0gPSB0aGlzLnNvdXJjZUltYWdlRGF0YS5kYXRhW2kgKiA0ICsgMV07XG4gICAgICAgICAgICAgICAgaW1hZ2VEYXRhLmRhdGFbaSAqIDQgKyAyXSA9IHRoaXMuc291cmNlSW1hZ2VEYXRhLmRhdGFbaSAqIDQgKyAyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwLnByb3RvdHlwZSwgXCJ3aWR0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLm5hdHVyYWxXaWR0aDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcC5wcm90b3R5cGUsIFwiaGVpZ2h0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2UubmF0dXJhbEhlaWdodDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcC5wcm90b3R5cGUsIFwicmVuZGVyV2lkdGhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndpZHRoICogdGhpcy5zY2FsZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcC5wcm90b3R5cGUsIFwicmVuZGVySGVpZ2h0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oZWlnaHQgKiB0aGlzLnNjYWxlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBBcHAucHJvdG90eXBlLm1vdXNlRG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgeCA9IChldmVudC5vZmZzZXRYIC8gdGhpcy5yZW5kZXJXaWR0aCAqIHRoaXMud2lkdGgpIHwgMDtcbiAgICAgICAgdmFyIHkgPSAoZXZlbnQub2Zmc2V0WSAvIHRoaXMucmVuZGVySGVpZ2h0ICogdGhpcy5oZWlnaHQpIHwgMDtcbiAgICAgICAgdmFyIHJlZmVyZW5jZSA9IHRoaXMucmVmZXJlbmNlc1t5ICogdGhpcy53aWR0aCArIHhdO1xuICAgICAgICBjb25zb2xlLmxvZyh7IHg6IHgsIHk6IHksIHJlZmVyZW5jZTogcmVmZXJlbmNlLCBzdGF0ZTogdGhpcy5zdGF0ZSB9KTtcbiAgICAgICAgaWYgKHRoaXMuZm9yY2VFbmFibGVSZWZlcmVuY2UgIT09IHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgdGhpcy5mb3JjZUVuYWJsZVJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmZvcmNlRW5hYmxlUmVmZXJlbmNlID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVbdGhpcy5mb3JjZUVuYWJsZVJlZmVyZW5jZV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXBwLnByb3RvdHlwZS5tb3VzZVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmZvcmNlRW5hYmxlUmVmZXJlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmZvcmNlRW5hYmxlUmVmZXJlbmNlID0gMDtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFwcC5wcm90b3R5cGUucmVuZGVyUmVmZXJlbmNlc1ByZXZpZXcgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIG1heFJlZmVyZW5jZSA9IF9hLm1heFJlZmVyZW5jZSwgbGVuZ3RoID0gX2EubGVuZ3RoLCByZWZlcmVuY2VzID0gX2EucmVmZXJlbmNlcztcbiAgICAgICAgdmFyIHJjdHggPSB0aGlzLnJlZmVyZW5jZXNQcmV2aWV3LmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgcmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICByY3R4Lmdsb2JhbEFscGhhID0gMC40O1xuICAgICAgICB2YXIgY29sb3JzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IG1heFJlZmVyZW5jZTsgaSsrKSB7XG4gICAgICAgICAgICBjb2xvcnMucHVzaChyYWluYm93KG1heFJlZmVyZW5jZSArIDEsIGkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb2xvcnMuc29ydChmdW5jdGlvbiAoKSB7IHJldHVybiBNYXRoLnJhbmRvbSgpID4gMC41ID8gLTEgOiAxOyB9KTtcbiAgICAgICAgY29sb3JzLnVuc2hpZnQoXCJibGFja1wiKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHJlZmVyZW5jZSA9IHJlZmVyZW5jZXNbaV07XG4gICAgICAgICAgICByY3R4LmZpbGxTdHlsZSA9IGNvbG9yc1tyZWZlcmVuY2VdO1xuICAgICAgICAgICAgdmFyIHggPSAoaSAlIHRoaXMud2lkdGgpIHwgMDtcbiAgICAgICAgICAgIHZhciB5ID0gKGkgLyB0aGlzLndpZHRoKSB8IDA7XG4gICAgICAgICAgICByY3R4LmZpbGxSZWN0KHgsIHksIDEsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBcHAucHJvdG90eXBlLnJlbmRlck5vdEdhdGVzUHJldmlldyA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgbm90R2F0ZUluZGV4UGFpcnMgPSBfYS5ub3RHYXRlSW5kZXhQYWlycztcbiAgICAgICAgdmFyIHJjdHggPSB0aGlzLnJlZmVyZW5jZXNQcmV2aWV3LmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgcmN0eC5nbG9iYWxBbHBoYSA9IDEuMDtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBub3RHYXRlSW5kZXhQYWlyc18xID0gbm90R2F0ZUluZGV4UGFpcnM7IF9pIDwgbm90R2F0ZUluZGV4UGFpcnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBfYiA9IG5vdEdhdGVJbmRleFBhaXJzXzFbX2ldLCBzb3VyY2VJbmRleCA9IF9iWzBdLCByZWNlaXZlckluZGV4ID0gX2JbMV07XG4gICAgICAgICAgICByY3R4LmZpbGxTdHlsZSA9IFwiI0YwMFwiO1xuICAgICAgICAgICAgdmFyIHNvdXJjZVggPSAoc291cmNlSW5kZXggJSB0aGlzLndpZHRoKSB8IDA7XG4gICAgICAgICAgICB2YXIgc291cmNlWSA9IChzb3VyY2VJbmRleCAvIHRoaXMud2lkdGgpIHwgMDtcbiAgICAgICAgICAgIHJjdHguZmlsbFJlY3Qoc291cmNlWCwgc291cmNlWSwgMSwgMSk7XG4gICAgICAgICAgICByY3R4LmZpbGxTdHlsZSA9IFwiIzBGMFwiO1xuICAgICAgICAgICAgdmFyIHJlY2VpdmVyWCA9IChyZWNlaXZlckluZGV4ICUgdGhpcy53aWR0aCkgfCAwO1xuICAgICAgICAgICAgdmFyIHJlY2VpdmVyWSA9IChyZWNlaXZlckluZGV4IC8gdGhpcy53aWR0aCkgfCAwO1xuICAgICAgICAgICAgcmN0eC5maWxsUmVjdChyZWNlaXZlclgsIHJlY2VpdmVyWSwgMSwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBcHA7XG59KCkpO1xuZXhwb3J0IHsgQXBwIH07XG5mdW5jdGlvbiByYWluYm93KG51bU9mU3RlcHMsIHN0ZXApIHtcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyB2aWJyYW50LCBcImV2ZW5seSBzcGFjZWRcIiBjb2xvdXJzIChpLmUuIG5vIGNsdXN0ZXJpbmcpLiBUaGlzIGlzIGlkZWFsIGZvciBjcmVhdGluZyBlYXNpbHkgZGlzdGluZ3Vpc2hhYmxlIHZpYnJhbnQgbWFya2VycyBpbiBHb29nbGUgTWFwcyBhbmQgb3RoZXIgYXBwcy5cbiAgICAvLyBBZGFtIENvbGUsIDIwMTEtU2VwdC0xNFxuICAgIC8vIEhTViB0byBSQkcgYWRhcHRlZCBmcm9tOiBodHRwOi8vbWppamFja3Nvbi5jb20vMjAwOC8wMi9yZ2ItdG8taHNsLWFuZC1yZ2ItdG8taHN2LWNvbG9yLW1vZGVsLWNvbnZlcnNpb24tYWxnb3JpdGhtcy1pbi1qYXZhc2NyaXB0XG4gICAgdmFyIHI7XG4gICAgdmFyIGc7XG4gICAgdmFyIGI7XG4gICAgdmFyIGggPSBzdGVwIC8gbnVtT2ZTdGVwcztcbiAgICB2YXIgaSA9IH5+KGggKiA2KTtcbiAgICB2YXIgZiA9IGggKiA2IC0gaTtcbiAgICB2YXIgcSA9IDEgLSBmO1xuICAgIHN3aXRjaCAoaSAlIDYpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgciA9IDE7XG4gICAgICAgICAgICBnID0gZjtcbiAgICAgICAgICAgIGIgPSAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHIgPSBxO1xuICAgICAgICAgICAgZyA9IDE7XG4gICAgICAgICAgICBiID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByID0gMDtcbiAgICAgICAgICAgIGcgPSAxO1xuICAgICAgICAgICAgYiA9IGY7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgciA9IDA7XG4gICAgICAgICAgICBnID0gcTtcbiAgICAgICAgICAgIGIgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHIgPSBmO1xuICAgICAgICAgICAgZyA9IDA7XG4gICAgICAgICAgICBiID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICByID0gMTtcbiAgICAgICAgICAgIGcgPSAwO1xuICAgICAgICAgICAgYiA9IHE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiXCIpO1xuICAgIH1cbiAgICB2YXIgYyA9IFwiI1wiICsgKFwiMDBcIiArICh+fihyICogMjU1KSkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgKyAoXCIwMFwiICsgKH5+KGcgKiAyNTUpKS50b1N0cmluZygxNikpLnNsaWNlKC0yKSArIChcIjAwXCIgKyAofn4oYiAqIDI1NSkpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgIHJldHVybiAoYyk7XG59XG4iLCJpbXBvcnQgbGFyZ2VDbG9jayBmcm9tIFwiLi9hc3NldHMvbGFyZ2UtY2xvY2sucG5nXCI7XG5pbXBvcnQgY2xvY2sgZnJvbSBcIi4vYXNzZXRzL2Nsb2NrLnBuZ1wiO1xuaW1wb3J0IGNwdSBmcm9tIFwiLi9hc3NldHMvY3B1LnBuZ1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vQXBwXCI7XG52YXIgYml0bWFwcyA9IHsgbGFyZ2VDbG9jazogbGFyZ2VDbG9jaywgY2xvY2s6IGNsb2NrLCBjcHU6IGNwdSB9O1xudmFyIGJpdG1hcE5hbWUgPSBsb2NhdGlvbi5oYXNoICYmIGxvY2F0aW9uLmhhc2guc3Vic3RyKDEpIHx8IE9iamVjdC5rZXlzKGJpdG1hcHMpWzBdO1xudmFyIGFwcCA9IG51bGw7XG5mdW5jdGlvbiBzdGFydCgpIHtcbiAgICBzdG9wKCk7XG4gICAgYXBwID0gbmV3IEFwcCgpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYXBwLmVsZW1lbnQpO1xuICAgIGFwcC5zdGFydCgpO1xuICAgIGFwcC5sb2FkKGJpdG1hcHNbYml0bWFwTmFtZV0pO1xufVxuZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBpZiAoYXBwKSB7XG4gICAgICAgIGFwcC5zdG9wKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYXBwLmVsZW1lbnQpO1xuICAgICAgICBhcHAgPSBudWxsO1xuICAgIH1cbn1cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIHN0YXJ0KTtcbmlmIChtb2R1bGUuaG90KSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoJy4vQXBwJywgc3RhcnQpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==